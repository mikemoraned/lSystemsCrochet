// Generated by CoffeeScript 1.6.3
(function() {
  var VerletLayout,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  VerletLayout = (function() {
    function VerletLayout(selector) {
      this.selector = selector;
      this._redraw = __bind(this._redraw, this);
      this._loop = __bind(this._loop, this);
      this._placeInCircleAroundOrigin = __bind(this._placeInCircleAroundOrigin, this);
      this._setup = __bind(this._setup, this);
      this.grow = __bind(this.grow, this);
      this.roots = [new Blue(), new Red(), new Blue(), new Blue(), new Red(), new Red()];
      this.outerLayer = this.roots;
      this.generations = 1;
      this._setup();
      this._redraw();
    }

    VerletLayout.prototype.grow = function() {
      var child, growth, parent, _i, _j, _len, _len1, _ref, _ref1;
      console.log("Grow!");
      growth = [];
      _ref = this.outerLayer;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parent = _ref[_i];
        _ref1 = parent.grow();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          child = _ref1[_j];
          growth.push(child);
        }
      }
      this.outerLayer = growth;
      this.generations++;
      return this._redraw();
    };

    VerletLayout.prototype._setup = function() {
      var canvas, dpr, first, foop, height, last, width;
      console.log("setup");
      canvas = document.getElementById(this.selector);
      width = parseInt(canvas.style.width);
      height = parseInt(canvas.style.height);
      dpr = window.devicePixelRatio || 1;
      canvas.width = width * dpr;
      canvas.height = height * dpr;
      canvas.getContext("2d").scale(dpr, dpr);
      this.sim = new VerletJS(width, height, canvas);
      this.sim.friction = 0.7;
      this.sim.gravity = new Vec2(0.0, 0.0);
      this.origin = new Vec2(width / 2, height / 2);
      this.sim.composites.push(this._placeInCircleAroundOrigin(this.generations * 8.0, this.outerLayer));
      foop = new VerletJS.Composite();
      first = new Particle(this.origin);
      last = new Particle(this.origin.add(new Vec2(4.0, 4.0)));
      foop.particles.push(first);
      foop.particles.push(last);
      foop.constraints.push(new DistanceConstraint(first, last, 0.05, 100.0));
      return this._loop();
    };

    VerletLayout.prototype._placeInCircleAroundOrigin = function(radius, nodes) {
      var circumferenceSeparation, count, firstParticle, lastParticleAdded, layerComposite, node, radiusInc, stiffness, _i, _len;
      layerComposite = new VerletJS.Composite();
      firstParticle = null;
      lastParticleAdded = null;
      count = 0;
      radiusInc = (Math.PI * 2.0) / nodes.length;
      circumferenceSeparation = ((Math.PI * 2.0) * radius) / nodes.length;
      stiffness = 0.1;
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        node.particle = new Particle(this.origin.add(new Vec2(radius * Math.sin(count * radiusInc), radius * Math.cos(count * radiusInc))));
        layerComposite.particles.push(node.particle);
        if (lastParticleAdded != null) {
          layerComposite.constraints.push(new DistanceConstraint(lastParticleAdded, node.particle, stiffness, circumferenceSeparation));
        } else {
          firstParticle = node.particle;
        }
        lastParticleAdded = node.particle;
        count += 1;
      }
      layerComposite.constraints.push(new DistanceConstraint(lastParticleAdded, firstParticle, stiffness, circumferenceSeparation));
      return layerComposite;
    };

    VerletLayout.prototype._loop = function() {
      this.sim.frame(16);
      this.sim.draw();
      return window.requestAnimFrame(this._loop);
    };

    VerletLayout.prototype._redraw = function() {
      console.log("redraw");
      return this.sim.composites.push(this._placeInCircleAroundOrigin(this.generations * 8.0, this.outerLayer));
    };

    return VerletLayout;

  })();

  window.VerletLayout = VerletLayout;

}).call(this);

/*
//@ sourceMappingURL=VerletLayout.map
*/
