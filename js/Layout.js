// Generated by CoffeeScript 1.6.1
(function() {
  var Layout,
    _this = this;

  Layout = (function() {

    function Layout(width, height, selector) {
      var _this = this;
      this.width = width;
      this.height = height;
      this.selector = selector;
      this._redraw = function() {
        return Layout.prototype._redraw.apply(_this, arguments);
      };
      this._setup = function() {
        return Layout.prototype._setup.apply(_this, arguments);
      };
      this.start = function() {
        return Layout.prototype.start.apply(_this, arguments);
      };
      this._newParticle = function() {
        return Layout.prototype._newParticle.apply(_this, arguments);
      };
      this.grow = function() {
        return Layout.prototype.grow.apply(_this, arguments);
      };
      this.roots = [new Blue(), new Red(), new Blue(), new Blue(), new Red(), new Red()];
      this.outerLayer = this.roots;
    }

    Layout.prototype.grow = function() {
      var child, firstChild, growth, lastChild, parent, _i, _j, _len, _len1, _ref, _ref1;
      console.log("Grow!");
      growth = [];
      firstChild = null;
      lastChild = null;
      _ref = this.outerLayer;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        parent = _ref[_i];
        _ref1 = parent.grow();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          child = _ref1[_j];
          this._newParticle();
          growth.push(child);
        }
      }
      return this.outerLayer = growth;
    };

    Layout.prototype._newParticle = function() {
      var center, p;
      center = new Vector(this.width * Math.random(), this.height * Math.random());
      p = new Particle(6.0);
      p.colour = 'DC0048';
      p.moveTo(center);
      p.setRadius(10.0);
      p.behaviours.push(this.edge);
      p.behaviours.push(this.wander);
      return this.physics.particles.push(p);
    };

    Layout.prototype.start = function() {
      this._setup();
      return this._redraw();
    };

    Layout.prototype._setup = function() {
      var center, container, gap, max, min;
      this.physics = new Physics();
      this.height = window.innerHeight;
      this.width = window.innerWidth;
      this.stiffness = 1.0;
      this.spacing = 2.0;
      this.physics.integrator = new Verlet();
      this.physics.viscosity = 0.0001;
      gap = 50.0;
      min = new Vector(-gap, -gap);
      max = new Vector(this.width + gap, this.height + gap);
      this.edge = new EdgeBounce(min, max);
      this.wander = new Wander(0.05, 100.0, 80.0);
      center = new Vector(this.width * 0.5, this.height * 0.5);
      console.dir(center);
      this.renderer = new CanvasRenderer();
      container = $(this.selector);
      container.get(0).appendChild(this.renderer.domElement);
      this.renderer.renderMouse = false;
      this.renderer.init(this.physics);
      return this.renderer.setSize(this.width, this.height);
    };

    Layout.prototype._redraw = function() {
      requestAnimationFrame(this._redraw);
      this.physics.step();
      return this.renderer.render(this.physics);
    };

    return Layout;

  })();

  window.Layout = Layout;

}).call(this);
