// Generated by CoffeeScript 1.6.1
(function() {
  var Layout, Visitor,
    _this = this;

  Visitor = (function() {

    function Visitor(posMap, nodes, links) {
      var _this = this;
      this.posMap = posMap;
      this.nodes = nodes;
      this.links = links;
      this.visit = function(parent, children) {
        return Visitor.prototype.visit.apply(_this, arguments);
      };
    }

    Visitor.prototype.visit = function(parent, children) {
      var child, childPos, link, parentPos, _i, _len, _results;
      parentPos = this.posMap[parent.id];
      if (parentPos == null) {
        parentPos = this.nodes.length;
        this.nodes.push(parent);
        this.posMap[parent.id] = parentPos;
      } else {
        this.nodes.push(parent);
      }
      console.log("posMap:");
      console.dir(this.posMap);
      console.log("id " + parent.id + " -> " + parentPos);
      _results = [];
      for (_i = 0, _len = children.length; _i < _len; _i++) {
        child = children[_i];
        child.accept(this);
        childPos = this.posMap[child.id];
        console.log("parent -> child: " + parentPos + " -> " + childPos);
        link = {};
        link.source = parentPos;
        link.target = childPos;
        console.log("link to child " + child.id + ":");
        console.dir(link);
        _results.push(this.links.push(link));
      }
      return _results;
    };

    return Visitor;

  })();

  Layout = (function() {

    function Layout(width, height, selector) {
      var _this = this;
      this.width = width;
      this.height = height;
      this.selector = selector;
      this._traverse = function() {
        return Layout.prototype._traverse.apply(_this, arguments);
      };
      this._redraw = function() {
        return Layout.prototype._redraw.apply(_this, arguments);
      };
      this._setup = function() {
        return Layout.prototype._setup.apply(_this, arguments);
      };
      this.grow = function() {
        return Layout.prototype.grow.apply(_this, arguments);
      };
      this.roots = [new Blue()];
      this.outerLayer = this.roots;
      this._setup();
      this._redraw();
    }

    Layout.prototype.grow = function() {
      var grown, grownNode, growth, node, _i, _j, _len, _len1, _ref;
      console.log("Grow!");
      growth = [];
      _ref = this.outerLayer;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        grown = node.grow();
        for (_j = 0, _len1 = grown.length; _j < _len1; _j++) {
          grownNode = grown[_j];
          growth.push(grownNode);
        }
      }
      this.outerLayer = growth;
      return this._redraw();
    };

    Layout.prototype._setup = function() {
      var links, nodes, _ref;
      this.posMap = {};
      this.svg = d3.select(this.selector);
      _ref = this._traverse(), nodes = _ref[0], links = _ref[1];
      return this.force = d3.layout.force().nodes(nodes).links(links).size([this.width, this.height]).start();
    };

    Layout.prototype._redraw = function() {
      var link, links, node, nodes, _ref;
      _ref = this._traverse(), nodes = _ref[0], links = _ref[1];
      this.force.nodes(nodes).links(links).start();
      link = this.svg.selectAll(".link").data(links).enter().append("line").attr("class", "link");
      node = this.svg.selectAll(".node").data(nodes, function(d) {
        return d.id;
      }).enter().append("circle").attr("class", function(d) {
        return "node " + d.color;
      }).attr("r", 5).call(this.force.drag);
      return this.force.on("tick", function() {
        link.attr("x1", function(d) {
          return d.source.x;
        }).attr("y1", function(d) {
          return d.source.y;
        }).attr("x2", function(d) {
          return d.target.x;
        }).attr("y2", function(d) {
          return d.target.y;
        });
        return node.attr("cx", function(d) {
          return d.x;
        }).attr("cy", function(d) {
          return d.y;
        });
      });
    };

    Layout.prototype._traverse = function() {
      var links, nodes, root, visitor, _i, _len, _ref;
      nodes = [];
      links = [];
      visitor = new Visitor(this.posMap, nodes, links);
      _ref = this.roots;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        root = _ref[_i];
        root.accept(visitor);
      }
      console.dir(nodes);
      console.dir(links);
      return [nodes, links];
    };

    return Layout;

  })();

  window.Layout = Layout;

}).call(this);
